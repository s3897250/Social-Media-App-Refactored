generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Models

model User {
  user_id     BigInt  @id @default(autoincrement())
  email       String? @db.VarChar(32) // Should be changed to email
  password    String  @db.VarChar(96)
  first_name  String  @db.VarChar(40)
  last_name   String  @db.VarChar(40)
  profile_pic String? @default("none")
  date_joined String? @default("none")
  followers   String? @default("[]") // JSON string
  following   String? @default("[]") // JSON string
  blocked     Boolean @default(false)

  Post Post[]
}

model Post {
  id    BigInt  @id @default(autoincrement())
  title String? @db.VarChar(144)
  body  String? @db.VarChar(144)
  image String? @db.VarChar(144)
  Reply Reply[]

  User        User?   @relation(fields: [userUser_id], references: [user_id])
  userUser_id BigInt?
}

model Reply {
  reply_id   BigInt    @id @default(autoincrement())
  reply_body String?
  user       String?
  date       String?
  Comment    Comment[]

  Post   Post?   @relation(fields: [postId], references: [id])
  postId BigInt?
}

model Comment {
  comment_id   BigInt      @id @default(autoincrement())
  comment_body String?
  user         String?
  Reactions    Reactions[]

  Reply         Reply?  @relation(fields: [replyReply_id], references: [reply_id])
  replyReply_id BigInt?
}

model Reactions {
  reactions_id          BigInt  @id @default(autoincrement())
  liked                 Boolean @default(false)
  disliked              Boolean @default(false)
  likeCount             Int     @default(0)
  peopleWhoHaveLiked    String? @default("[]") // JSON string
  peopleWhoHaveDisliked String? @default("[]") // JSON string

  Comment           Comment? @relation(fields: [commentComment_id], references: [comment_id])
  commentComment_id BigInt?
}
